"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postcss-value-parser";
exports.ids = ["vendor-chunks/postcss-value-parser"];
exports.modules = {

/***/ "(ssr)/./node_modules/postcss-value-parser/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/postcss-value-parser/lib/parse.js\");\nvar walk = __webpack_require__(/*! ./walk */ \"(ssr)/./node_modules/postcss-value-parser/lib/walk.js\");\nvar stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss-value-parser/lib/stringify.js\");\nfunction ValueParser(value) {\n    if (this instanceof ValueParser) {\n        this.nodes = parse(value);\n        return this;\n    }\n    return new ValueParser(value);\n}\nValueParser.prototype.toString = function() {\n    return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\nValueParser.prototype.walk = function(cb, bubble) {\n    walk(this.nodes, cb, bubble);\n    return this;\n};\nValueParser.unit = __webpack_require__(/*! ./unit */ \"(ssr)/./node_modules/postcss-value-parser/lib/unit.js\");\nValueParser.walk = walk;\nValueParser.stringify = stringify;\nmodule.exports = ValueParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQyx1RUFBUztBQUM3QixJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQyxxRUFBUTtBQUMzQixJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQywrRUFBYTtBQUVyQyxTQUFTRyxZQUFZQyxLQUFLO0lBQ3hCLElBQUksSUFBSSxZQUFZRCxhQUFhO1FBQy9CLElBQUksQ0FBQ0UsS0FBSyxHQUFHTixNQUFNSztRQUNuQixPQUFPLElBQUk7SUFDYjtJQUNBLE9BQU8sSUFBSUQsWUFBWUM7QUFDekI7QUFFQUQsWUFBWUcsU0FBUyxDQUFDQyxRQUFRLEdBQUc7SUFDL0IsT0FBT0MsTUFBTUMsT0FBTyxDQUFDLElBQUksQ0FBQ0osS0FBSyxJQUFJSCxVQUFVLElBQUksQ0FBQ0csS0FBSyxJQUFJO0FBQzdEO0FBRUFGLFlBQVlHLFNBQVMsQ0FBQ0wsSUFBSSxHQUFHLFNBQVNTLEVBQUUsRUFBRUMsTUFBTTtJQUM5Q1YsS0FBSyxJQUFJLENBQUNJLEtBQUssRUFBRUssSUFBSUM7SUFDckIsT0FBTyxJQUFJO0FBQ2I7QUFFQVIsWUFBWVMsSUFBSSxHQUFHWixtQkFBT0EsQ0FBQyxxRUFBUTtBQUVuQ0csWUFBWUYsSUFBSSxHQUFHQTtBQUVuQkUsWUFBWUQsU0FBUyxHQUFHQTtBQUV4QlcsT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtdmFsdWUtcGFyc2VyL2xpYi9pbmRleC5qcz9lYzYyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwYXJzZSA9IHJlcXVpcmUoXCIuL3BhcnNlXCIpO1xudmFyIHdhbGsgPSByZXF1aXJlKFwiLi93YWxrXCIpO1xudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeVwiKTtcblxuZnVuY3Rpb24gVmFsdWVQYXJzZXIodmFsdWUpIHtcbiAgaWYgKHRoaXMgaW5zdGFuY2VvZiBWYWx1ZVBhcnNlcikge1xuICAgIHRoaXMubm9kZXMgPSBwYXJzZSh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmV0dXJuIG5ldyBWYWx1ZVBhcnNlcih2YWx1ZSk7XG59XG5cblZhbHVlUGFyc2VyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLm5vZGVzKSA/IHN0cmluZ2lmeSh0aGlzLm5vZGVzKSA6IFwiXCI7XG59O1xuXG5WYWx1ZVBhcnNlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uKGNiLCBidWJibGUpIHtcbiAgd2Fsayh0aGlzLm5vZGVzLCBjYiwgYnViYmxlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5WYWx1ZVBhcnNlci51bml0ID0gcmVxdWlyZShcIi4vdW5pdFwiKTtcblxuVmFsdWVQYXJzZXIud2FsayA9IHdhbGs7XG5cblZhbHVlUGFyc2VyLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTtcblxubW9kdWxlLmV4cG9ydHMgPSBWYWx1ZVBhcnNlcjtcbiJdLCJuYW1lcyI6WyJwYXJzZSIsInJlcXVpcmUiLCJ3YWxrIiwic3RyaW5naWZ5IiwiVmFsdWVQYXJzZXIiLCJ2YWx1ZSIsIm5vZGVzIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJjYiIsImJ1YmJsZSIsInVuaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss-value-parser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss-value-parser/lib/parse.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/parse.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\nmodule.exports = function(input) {\n    var tokens = [];\n    var value = input;\n    var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;\n    var pos = 0;\n    var code = value.charCodeAt(pos);\n    var max = value.length;\n    var stack = [\n        {\n            nodes: tokens\n        }\n    ];\n    var balanced = 0;\n    var parent;\n    var name = \"\";\n    var before = \"\";\n    var after = \"\";\n    while(pos < max){\n        // Whitespaces\n        if (code <= 32) {\n            next = pos;\n            do {\n                next += 1;\n                code = value.charCodeAt(next);\n            }while (code <= 32);\n            token = value.slice(pos, next);\n            prev = tokens[tokens.length - 1];\n            if (code === closeParentheses && balanced) {\n                after = token;\n            } else if (prev && prev.type === \"div\") {\n                prev.after = token;\n                prev.sourceEndIndex += token.length;\n            } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === \"function\" && parent.value !== \"calc\")) {\n                before = token;\n            } else {\n                tokens.push({\n                    type: \"space\",\n                    sourceIndex: pos,\n                    sourceEndIndex: next,\n                    value: token\n                });\n            }\n            pos = next;\n        // Quotes\n        } else if (code === singleQuote || code === doubleQuote) {\n            next = pos;\n            quote = code === singleQuote ? \"'\" : '\"';\n            token = {\n                type: \"string\",\n                sourceIndex: pos,\n                quote: quote\n            };\n            do {\n                escape = false;\n                next = value.indexOf(quote, next + 1);\n                if (~next) {\n                    escapePos = next;\n                    while(value.charCodeAt(escapePos - 1) === backslash){\n                        escapePos -= 1;\n                        escape = !escape;\n                    }\n                } else {\n                    value += quote;\n                    next = value.length - 1;\n                    token.unclosed = true;\n                }\n            }while (escape);\n            token.value = value.slice(pos + 1, next);\n            token.sourceEndIndex = token.unclosed ? next : next + 1;\n            tokens.push(token);\n            pos = next + 1;\n            code = value.charCodeAt(pos);\n        // Comments\n        } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n            next = value.indexOf(\"*/\", pos);\n            token = {\n                type: \"comment\",\n                sourceIndex: pos,\n                sourceEndIndex: next + 2\n            };\n            if (next === -1) {\n                token.unclosed = true;\n                next = value.length;\n                token.sourceEndIndex = next;\n            }\n            token.value = value.slice(pos + 2, next);\n            tokens.push(token);\n            pos = next + 2;\n            code = value.charCodeAt(pos);\n        // Operation within calc\n        } else if ((code === slash || code === star) && parent && parent.type === \"function\" && parent.value === \"calc\") {\n            token = value[pos];\n            tokens.push({\n                type: \"word\",\n                sourceIndex: pos - before.length,\n                sourceEndIndex: pos + token.length,\n                value: token\n            });\n            pos += 1;\n            code = value.charCodeAt(pos);\n        // Dividers\n        } else if (code === slash || code === comma || code === colon) {\n            token = value[pos];\n            tokens.push({\n                type: \"div\",\n                sourceIndex: pos - before.length,\n                sourceEndIndex: pos + token.length,\n                value: token,\n                before: before,\n                after: \"\"\n            });\n            before = \"\";\n            pos += 1;\n            code = value.charCodeAt(pos);\n        // Open parentheses\n        } else if (openParentheses === code) {\n            // Whitespaces after open parentheses\n            next = pos;\n            do {\n                next += 1;\n                code = value.charCodeAt(next);\n            }while (code <= 32);\n            parenthesesOpenPos = pos;\n            token = {\n                type: \"function\",\n                sourceIndex: pos - name.length,\n                value: name,\n                before: value.slice(parenthesesOpenPos + 1, next)\n            };\n            pos = next;\n            if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n                next -= 1;\n                do {\n                    escape = false;\n                    next = value.indexOf(\")\", next + 1);\n                    if (~next) {\n                        escapePos = next;\n                        while(value.charCodeAt(escapePos - 1) === backslash){\n                            escapePos -= 1;\n                            escape = !escape;\n                        }\n                    } else {\n                        value += \")\";\n                        next = value.length - 1;\n                        token.unclosed = true;\n                    }\n                }while (escape);\n                // Whitespaces before closed\n                whitespacePos = next;\n                do {\n                    whitespacePos -= 1;\n                    code = value.charCodeAt(whitespacePos);\n                }while (code <= 32);\n                if (parenthesesOpenPos < whitespacePos) {\n                    if (pos !== whitespacePos + 1) {\n                        token.nodes = [\n                            {\n                                type: \"word\",\n                                sourceIndex: pos,\n                                sourceEndIndex: whitespacePos + 1,\n                                value: value.slice(pos, whitespacePos + 1)\n                            }\n                        ];\n                    } else {\n                        token.nodes = [];\n                    }\n                    if (token.unclosed && whitespacePos + 1 !== next) {\n                        token.after = \"\";\n                        token.nodes.push({\n                            type: \"space\",\n                            sourceIndex: whitespacePos + 1,\n                            sourceEndIndex: next,\n                            value: value.slice(whitespacePos + 1, next)\n                        });\n                    } else {\n                        token.after = value.slice(whitespacePos + 1, next);\n                        token.sourceEndIndex = next;\n                    }\n                } else {\n                    token.after = \"\";\n                    token.nodes = [];\n                }\n                pos = next + 1;\n                token.sourceEndIndex = token.unclosed ? next : pos;\n                code = value.charCodeAt(pos);\n                tokens.push(token);\n            } else {\n                balanced += 1;\n                token.after = \"\";\n                token.sourceEndIndex = pos + 1;\n                tokens.push(token);\n                stack.push(token);\n                tokens = token.nodes = [];\n                parent = token;\n            }\n            name = \"\";\n        // Close parentheses\n        } else if (closeParentheses === code && balanced) {\n            pos += 1;\n            code = value.charCodeAt(pos);\n            parent.after = after;\n            parent.sourceEndIndex += after.length;\n            after = \"\";\n            balanced -= 1;\n            stack[stack.length - 1].sourceEndIndex = pos;\n            stack.pop();\n            parent = stack[balanced];\n            tokens = parent.nodes;\n        // Words\n        } else {\n            next = pos;\n            do {\n                if (code === backslash) {\n                    next += 1;\n                }\n                next += 1;\n                code = value.charCodeAt(next);\n            }while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === \"function\" && parent.value === \"calc\" || code === slash && parent.type === \"function\" && parent.value === \"calc\" || code === closeParentheses && balanced));\n            token = value.slice(pos, next);\n            if (openParentheses === code) {\n                name = token;\n            } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {\n                tokens.push({\n                    type: \"unicode-range\",\n                    sourceIndex: pos,\n                    sourceEndIndex: next,\n                    value: token\n                });\n            } else {\n                tokens.push({\n                    type: \"word\",\n                    sourceIndex: pos,\n                    sourceEndIndex: next,\n                    value: token\n                });\n            }\n            pos = next;\n        }\n    }\n    for(pos = stack.length - 1; pos; pos -= 1){\n        stack[pos].unclosed = true;\n        stack[pos].sourceEndIndex = value.length;\n    }\n    return stack[0].nodes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss-value-parser/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss-value-parser/lib/stringify.js":
/*!************************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/stringify.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nfunction stringifyNode(node, custom) {\n    var type = node.type;\n    var value = node.value;\n    var buf;\n    var customResult;\n    if (custom && (customResult = custom(node)) !== undefined) {\n        return customResult;\n    } else if (type === \"word\" || type === \"space\") {\n        return value;\n    } else if (type === \"string\") {\n        buf = node.quote || \"\";\n        return buf + value + (node.unclosed ? \"\" : buf);\n    } else if (type === \"comment\") {\n        return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n    } else if (type === \"div\") {\n        return (node.before || \"\") + value + (node.after || \"\");\n    } else if (Array.isArray(node.nodes)) {\n        buf = stringify(node.nodes, custom);\n        if (type !== \"function\") {\n            return buf;\n        }\n        return value + \"(\" + (node.before || \"\") + buf + (node.after || \"\") + (node.unclosed ? \"\" : \")\");\n    }\n    return value;\n}\nfunction stringify(nodes, custom) {\n    var result, i;\n    if (Array.isArray(nodes)) {\n        result = \"\";\n        for(i = nodes.length - 1; ~i; i -= 1){\n            result = stringifyNode(nodes[i], custom) + result;\n        }\n        return result;\n    }\n    return stringifyNode(nodes, custom);\n}\nmodule.exports = stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3N0cmluZ2lmeS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsU0FBU0EsY0FBY0MsSUFBSSxFQUFFQyxNQUFNO0lBQ2pDLElBQUlDLE9BQU9GLEtBQUtFLElBQUk7SUFDcEIsSUFBSUMsUUFBUUgsS0FBS0csS0FBSztJQUN0QixJQUFJQztJQUNKLElBQUlDO0lBRUosSUFBSUosVUFBVSxDQUFDSSxlQUFlSixPQUFPRCxLQUFJLE1BQU9NLFdBQVc7UUFDekQsT0FBT0Q7SUFDVCxPQUFPLElBQUlILFNBQVMsVUFBVUEsU0FBUyxTQUFTO1FBQzlDLE9BQU9DO0lBQ1QsT0FBTyxJQUFJRCxTQUFTLFVBQVU7UUFDNUJFLE1BQU1KLEtBQUtPLEtBQUssSUFBSTtRQUNwQixPQUFPSCxNQUFNRCxRQUFTSCxDQUFBQSxLQUFLUSxRQUFRLEdBQUcsS0FBS0osR0FBRTtJQUMvQyxPQUFPLElBQUlGLFNBQVMsV0FBVztRQUM3QixPQUFPLE9BQU9DLFFBQVNILENBQUFBLEtBQUtRLFFBQVEsR0FBRyxLQUFLLElBQUc7SUFDakQsT0FBTyxJQUFJTixTQUFTLE9BQU87UUFDekIsT0FBTyxDQUFDRixLQUFLUyxNQUFNLElBQUksRUFBQyxJQUFLTixRQUFTSCxDQUFBQSxLQUFLVSxLQUFLLElBQUksRUFBQztJQUN2RCxPQUFPLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ1osS0FBS2EsS0FBSyxHQUFHO1FBQ3BDVCxNQUFNVSxVQUFVZCxLQUFLYSxLQUFLLEVBQUVaO1FBQzVCLElBQUlDLFNBQVMsWUFBWTtZQUN2QixPQUFPRTtRQUNUO1FBQ0EsT0FDRUQsUUFDQSxNQUNDSCxDQUFBQSxLQUFLUyxNQUFNLElBQUksRUFBQyxJQUNqQkwsTUFDQ0osQ0FBQUEsS0FBS1UsS0FBSyxJQUFJLEVBQUMsSUFDZlYsQ0FBQUEsS0FBS1EsUUFBUSxHQUFHLEtBQUssR0FBRTtJQUU1QjtJQUNBLE9BQU9MO0FBQ1Q7QUFFQSxTQUFTVyxVQUFVRCxLQUFLLEVBQUVaLE1BQU07SUFDOUIsSUFBSWMsUUFBUUM7SUFFWixJQUFJTCxNQUFNQyxPQUFPLENBQUNDLFFBQVE7UUFDeEJFLFNBQVM7UUFDVCxJQUFLQyxJQUFJSCxNQUFNSSxNQUFNLEdBQUcsR0FBRyxDQUFDRCxHQUFHQSxLQUFLLEVBQUc7WUFDckNELFNBQVNoQixjQUFjYyxLQUFLLENBQUNHLEVBQUUsRUFBRWYsVUFBVWM7UUFDN0M7UUFDQSxPQUFPQTtJQUNUO0lBQ0EsT0FBT2hCLGNBQWNjLE9BQU9aO0FBQzlCO0FBRUFpQixPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLW5leHQvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3N0cmluZ2lmeS5qcz84YjEyIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHN0cmluZ2lmeU5vZGUobm9kZSwgY3VzdG9tKSB7XG4gIHZhciB0eXBlID0gbm9kZS50eXBlO1xuICB2YXIgdmFsdWUgPSBub2RlLnZhbHVlO1xuICB2YXIgYnVmO1xuICB2YXIgY3VzdG9tUmVzdWx0O1xuXG4gIGlmIChjdXN0b20gJiYgKGN1c3RvbVJlc3VsdCA9IGN1c3RvbShub2RlKSkgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjdXN0b21SZXN1bHQ7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ3b3JkXCIgfHwgdHlwZSA9PT0gXCJzcGFjZVwiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICBidWYgPSBub2RlLnF1b3RlIHx8IFwiXCI7XG4gICAgcmV0dXJuIGJ1ZiArIHZhbHVlICsgKG5vZGUudW5jbG9zZWQgPyBcIlwiIDogYnVmKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImNvbW1lbnRcIikge1xuICAgIHJldHVybiBcIi8qXCIgKyB2YWx1ZSArIChub2RlLnVuY2xvc2VkID8gXCJcIiA6IFwiKi9cIik7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkaXZcIikge1xuICAgIHJldHVybiAobm9kZS5iZWZvcmUgfHwgXCJcIikgKyB2YWx1ZSArIChub2RlLmFmdGVyIHx8IFwiXCIpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobm9kZS5ub2RlcykpIHtcbiAgICBidWYgPSBzdHJpbmdpZnkobm9kZS5ub2RlcywgY3VzdG9tKTtcbiAgICBpZiAodHlwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgdmFsdWUgK1xuICAgICAgXCIoXCIgK1xuICAgICAgKG5vZGUuYmVmb3JlIHx8IFwiXCIpICtcbiAgICAgIGJ1ZiArXG4gICAgICAobm9kZS5hZnRlciB8fCBcIlwiKSArXG4gICAgICAobm9kZS51bmNsb3NlZCA/IFwiXCIgOiBcIilcIilcbiAgICApO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KG5vZGVzLCBjdXN0b20pIHtcbiAgdmFyIHJlc3VsdCwgaTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShub2RlcykpIHtcbiAgICByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAoaSA9IG5vZGVzLmxlbmd0aCAtIDE7IH5pOyBpIC09IDEpIHtcbiAgICAgIHJlc3VsdCA9IHN0cmluZ2lmeU5vZGUobm9kZXNbaV0sIGN1c3RvbSkgKyByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ2lmeU5vZGUobm9kZXMsIGN1c3RvbSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5naWZ5O1xuIl0sIm5hbWVzIjpbInN0cmluZ2lmeU5vZGUiLCJub2RlIiwiY3VzdG9tIiwidHlwZSIsInZhbHVlIiwiYnVmIiwiY3VzdG9tUmVzdWx0IiwidW5kZWZpbmVkIiwicXVvdGUiLCJ1bmNsb3NlZCIsImJlZm9yZSIsImFmdGVyIiwiQXJyYXkiLCJpc0FycmF5Iiwibm9kZXMiLCJzdHJpbmdpZnkiLCJyZXN1bHQiLCJpIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss-value-parser/lib/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss-value-parser/lib/unit.js":
/*!*******************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/unit.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nvar minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n    var code = value.charCodeAt(0);\n    var nextCode;\n    if (code === plus || code === minus) {\n        nextCode = value.charCodeAt(1);\n        if (nextCode >= 48 && nextCode <= 57) {\n            return true;\n        }\n        var nextNextCode = value.charCodeAt(2);\n        if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n            return true;\n        }\n        return false;\n    }\n    if (code === dot) {\n        nextCode = value.charCodeAt(1);\n        if (nextCode >= 48 && nextCode <= 57) {\n            return true;\n        }\n        return false;\n    }\n    if (code >= 48 && code <= 57) {\n        return true;\n    }\n    return false;\n}\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n    var pos = 0;\n    var length = value.length;\n    var code;\n    var nextCode;\n    var nextNextCode;\n    if (length === 0 || !likeNumber(value)) {\n        return false;\n    }\n    code = value.charCodeAt(pos);\n    if (code === plus || code === minus) {\n        pos++;\n    }\n    while(pos < length){\n        code = value.charCodeAt(pos);\n        if (code < 48 || code > 57) {\n            break;\n        }\n        pos += 1;\n    }\n    code = value.charCodeAt(pos);\n    nextCode = value.charCodeAt(pos + 1);\n    if (code === dot && nextCode >= 48 && nextCode <= 57) {\n        pos += 2;\n        while(pos < length){\n            code = value.charCodeAt(pos);\n            if (code < 48 || code > 57) {\n                break;\n            }\n            pos += 1;\n        }\n    }\n    code = value.charCodeAt(pos);\n    nextCode = value.charCodeAt(pos + 1);\n    nextNextCode = value.charCodeAt(pos + 2);\n    if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {\n        pos += nextCode === plus || nextCode === minus ? 3 : 2;\n        while(pos < length){\n            code = value.charCodeAt(pos);\n            if (code < 48 || code > 57) {\n                break;\n            }\n            pos += 1;\n        }\n    }\n    return {\n        number: value.slice(0, pos),\n        unit: value.slice(pos)\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3VuaXQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFFBQVEsSUFBSUMsVUFBVSxDQUFDO0FBQzNCLElBQUlDLE9BQU8sSUFBSUQsVUFBVSxDQUFDO0FBQzFCLElBQUlFLE1BQU0sSUFBSUYsVUFBVSxDQUFDO0FBQ3pCLElBQUlHLE1BQU0sSUFBSUgsVUFBVSxDQUFDO0FBQ3pCLElBQUlJLE1BQU0sSUFBSUosVUFBVSxDQUFDO0FBRXpCLGtEQUFrRDtBQUNsRCwyREFBMkQ7QUFDM0QsU0FBU0ssV0FBV0MsS0FBSztJQUN2QixJQUFJQyxPQUFPRCxNQUFNTixVQUFVLENBQUM7SUFDNUIsSUFBSVE7SUFFSixJQUFJRCxTQUFTTixRQUFRTSxTQUFTUixPQUFPO1FBQ25DUyxXQUFXRixNQUFNTixVQUFVLENBQUM7UUFFNUIsSUFBSVEsWUFBWSxNQUFNQSxZQUFZLElBQUk7WUFDcEMsT0FBTztRQUNUO1FBRUEsSUFBSUMsZUFBZUgsTUFBTU4sVUFBVSxDQUFDO1FBRXBDLElBQUlRLGFBQWFOLE9BQU9PLGdCQUFnQixNQUFNQSxnQkFBZ0IsSUFBSTtZQUNoRSxPQUFPO1FBQ1Q7UUFFQSxPQUFPO0lBQ1Q7SUFFQSxJQUFJRixTQUFTTCxLQUFLO1FBQ2hCTSxXQUFXRixNQUFNTixVQUFVLENBQUM7UUFFNUIsSUFBSVEsWUFBWSxNQUFNQSxZQUFZLElBQUk7WUFDcEMsT0FBTztRQUNUO1FBRUEsT0FBTztJQUNUO0lBRUEsSUFBSUQsUUFBUSxNQUFNQSxRQUFRLElBQUk7UUFDNUIsT0FBTztJQUNUO0lBRUEsT0FBTztBQUNUO0FBRUEsbUJBQW1CO0FBQ25CLHFEQUFxRDtBQUNyREcsT0FBT0MsT0FBTyxHQUFHLFNBQVNMLEtBQUs7SUFDN0IsSUFBSU0sTUFBTTtJQUNWLElBQUlDLFNBQVNQLE1BQU1PLE1BQU07SUFDekIsSUFBSU47SUFDSixJQUFJQztJQUNKLElBQUlDO0lBRUosSUFBSUksV0FBVyxLQUFLLENBQUNSLFdBQVdDLFFBQVE7UUFDdEMsT0FBTztJQUNUO0lBRUFDLE9BQU9ELE1BQU1OLFVBQVUsQ0FBQ1k7SUFFeEIsSUFBSUwsU0FBU04sUUFBUU0sU0FBU1IsT0FBTztRQUNuQ2E7SUFDRjtJQUVBLE1BQU9BLE1BQU1DLE9BQVE7UUFDbkJOLE9BQU9ELE1BQU1OLFVBQVUsQ0FBQ1k7UUFFeEIsSUFBSUwsT0FBTyxNQUFNQSxPQUFPLElBQUk7WUFDMUI7UUFDRjtRQUVBSyxPQUFPO0lBQ1Q7SUFFQUwsT0FBT0QsTUFBTU4sVUFBVSxDQUFDWTtJQUN4QkosV0FBV0YsTUFBTU4sVUFBVSxDQUFDWSxNQUFNO0lBRWxDLElBQUlMLFNBQVNMLE9BQU9NLFlBQVksTUFBTUEsWUFBWSxJQUFJO1FBQ3BESSxPQUFPO1FBRVAsTUFBT0EsTUFBTUMsT0FBUTtZQUNuQk4sT0FBT0QsTUFBTU4sVUFBVSxDQUFDWTtZQUV4QixJQUFJTCxPQUFPLE1BQU1BLE9BQU8sSUFBSTtnQkFDMUI7WUFDRjtZQUVBSyxPQUFPO1FBQ1Q7SUFDRjtJQUVBTCxPQUFPRCxNQUFNTixVQUFVLENBQUNZO0lBQ3hCSixXQUFXRixNQUFNTixVQUFVLENBQUNZLE1BQU07SUFDbENILGVBQWVILE1BQU1OLFVBQVUsQ0FBQ1ksTUFBTTtJQUV0QyxJQUNFLENBQUNMLFNBQVNKLE9BQU9JLFNBQVNILEdBQUUsS0FDM0IsYUFBYSxNQUFNSSxZQUFZLE1BQzdCLENBQUNBLGFBQWFQLFFBQVFPLGFBQWFULEtBQUksS0FDdENVLGdCQUFnQixNQUNoQkEsZ0JBQWdCLEVBQUUsR0FDdEI7UUFDQUcsT0FBT0osYUFBYVAsUUFBUU8sYUFBYVQsUUFBUSxJQUFJO1FBRXJELE1BQU9hLE1BQU1DLE9BQVE7WUFDbkJOLE9BQU9ELE1BQU1OLFVBQVUsQ0FBQ1k7WUFFeEIsSUFBSUwsT0FBTyxNQUFNQSxPQUFPLElBQUk7Z0JBQzFCO1lBQ0Y7WUFFQUssT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO1FBQ0xFLFFBQVFSLE1BQU1TLEtBQUssQ0FBQyxHQUFHSDtRQUN2QkksTUFBTVYsTUFBTVMsS0FBSyxDQUFDSDtJQUNwQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLW5leHQvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3VuaXQuanM/ZmIyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWludXMgPSBcIi1cIi5jaGFyQ29kZUF0KDApO1xudmFyIHBsdXMgPSBcIitcIi5jaGFyQ29kZUF0KDApO1xudmFyIGRvdCA9IFwiLlwiLmNoYXJDb2RlQXQoMCk7XG52YXIgZXhwID0gXCJlXCIuY2hhckNvZGVBdCgwKTtcbnZhciBFWFAgPSBcIkVcIi5jaGFyQ29kZUF0KDApO1xuXG4vLyBDaGVjayBpZiB0aHJlZSBjb2RlIHBvaW50cyB3b3VsZCBzdGFydCBhIG51bWJlclxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jc3RhcnRzLXdpdGgtYS1udW1iZXJcbmZ1bmN0aW9uIGxpa2VOdW1iZXIodmFsdWUpIHtcbiAgdmFyIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KDApO1xuICB2YXIgbmV4dENvZGU7XG5cbiAgaWYgKGNvZGUgPT09IHBsdXMgfHwgY29kZSA9PT0gbWludXMpIHtcbiAgICBuZXh0Q29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoMSk7XG5cbiAgICBpZiAobmV4dENvZGUgPj0gNDggJiYgbmV4dENvZGUgPD0gNTcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBuZXh0TmV4dENvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KDIpO1xuXG4gICAgaWYgKG5leHRDb2RlID09PSBkb3QgJiYgbmV4dE5leHRDb2RlID49IDQ4ICYmIG5leHROZXh0Q29kZSA8PSA1Nykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGNvZGUgPT09IGRvdCkge1xuICAgIG5leHRDb2RlID0gdmFsdWUuY2hhckNvZGVBdCgxKTtcblxuICAgIGlmIChuZXh0Q29kZSA+PSA0OCAmJiBuZXh0Q29kZSA8PSA1Nykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBDb25zdW1lIGEgbnVtYmVyXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNjb25zdW1lLW51bWJlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgcG9zID0gMDtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGNvZGU7XG4gIHZhciBuZXh0Q29kZTtcbiAgdmFyIG5leHROZXh0Q29kZTtcblxuICBpZiAobGVuZ3RoID09PSAwIHx8ICFsaWtlTnVtYmVyKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgaWYgKGNvZGUgPT09IHBsdXMgfHwgY29kZSA9PT0gbWludXMpIHtcbiAgICBwb3MrKztcbiAgfVxuXG4gIHdoaWxlIChwb3MgPCBsZW5ndGgpIHtcbiAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gNTcpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHBvcyArPSAxO1xuICB9XG5cbiAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcbiAgbmV4dENvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyArIDEpO1xuXG4gIGlmIChjb2RlID09PSBkb3QgJiYgbmV4dENvZGUgPj0gNDggJiYgbmV4dENvZGUgPD0gNTcpIHtcbiAgICBwb3MgKz0gMjtcblxuICAgIHdoaWxlIChwb3MgPCBsZW5ndGgpIHtcbiAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IDU3KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBwb3MgKz0gMTtcbiAgICB9XG4gIH1cblxuICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuICBuZXh0Q29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zICsgMSk7XG4gIG5leHROZXh0Q29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zICsgMik7XG5cbiAgaWYgKFxuICAgIChjb2RlID09PSBleHAgfHwgY29kZSA9PT0gRVhQKSAmJlxuICAgICgobmV4dENvZGUgPj0gNDggJiYgbmV4dENvZGUgPD0gNTcpIHx8XG4gICAgICAoKG5leHRDb2RlID09PSBwbHVzIHx8IG5leHRDb2RlID09PSBtaW51cykgJiZcbiAgICAgICAgbmV4dE5leHRDb2RlID49IDQ4ICYmXG4gICAgICAgIG5leHROZXh0Q29kZSA8PSA1NykpXG4gICkge1xuICAgIHBvcyArPSBuZXh0Q29kZSA9PT0gcGx1cyB8fCBuZXh0Q29kZSA9PT0gbWludXMgPyAzIDogMjtcblxuICAgIHdoaWxlIChwb3MgPCBsZW5ndGgpIHtcbiAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IDU3KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBwb3MgKz0gMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG51bWJlcjogdmFsdWUuc2xpY2UoMCwgcG9zKSxcbiAgICB1bml0OiB2YWx1ZS5zbGljZShwb3MpXG4gIH07XG59O1xuIl0sIm5hbWVzIjpbIm1pbnVzIiwiY2hhckNvZGVBdCIsInBsdXMiLCJkb3QiLCJleHAiLCJFWFAiLCJsaWtlTnVtYmVyIiwidmFsdWUiLCJjb2RlIiwibmV4dENvZGUiLCJuZXh0TmV4dENvZGUiLCJtb2R1bGUiLCJleHBvcnRzIiwicG9zIiwibGVuZ3RoIiwibnVtYmVyIiwic2xpY2UiLCJ1bml0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss-value-parser/lib/unit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss-value-parser/lib/walk.js":
/*!*******************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/walk.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function walk(nodes, cb, bubble) {\n    var i, max, node, result;\n    for(i = 0, max = nodes.length; i < max; i += 1){\n        node = nodes[i];\n        if (!bubble) {\n            result = cb(node, i, nodes);\n        }\n        if (result !== false && node.type === \"function\" && Array.isArray(node.nodes)) {\n            walk(node.nodes, cb, bubble);\n        }\n        if (bubble) {\n            cb(node, i, nodes);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3dhbGsuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsS0FBS0MsS0FBSyxFQUFFQyxFQUFFLEVBQUVDLE1BQU07SUFDOUMsSUFBSUMsR0FBR0MsS0FBS0MsTUFBTUM7SUFFbEIsSUFBS0gsSUFBSSxHQUFHQyxNQUFNSixNQUFNTyxNQUFNLEVBQUVKLElBQUlDLEtBQUtELEtBQUssRUFBRztRQUMvQ0UsT0FBT0wsS0FBSyxDQUFDRyxFQUFFO1FBQ2YsSUFBSSxDQUFDRCxRQUFRO1lBQ1hJLFNBQVNMLEdBQUdJLE1BQU1GLEdBQUdIO1FBQ3ZCO1FBRUEsSUFDRU0sV0FBVyxTQUNYRCxLQUFLRyxJQUFJLEtBQUssY0FDZEMsTUFBTUMsT0FBTyxDQUFDTCxLQUFLTCxLQUFLLEdBQ3hCO1lBQ0FELEtBQUtNLEtBQUtMLEtBQUssRUFBRUMsSUFBSUM7UUFDdkI7UUFFQSxJQUFJQSxRQUFRO1lBQ1ZELEdBQUdJLE1BQU1GLEdBQUdIO1FBQ2Q7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLW5leHQvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3dhbGsuanM/YTM0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdhbGsobm9kZXMsIGNiLCBidWJibGUpIHtcbiAgdmFyIGksIG1heCwgbm9kZSwgcmVzdWx0O1xuXG4gIGZvciAoaSA9IDAsIG1heCA9IG5vZGVzLmxlbmd0aDsgaSA8IG1heDsgaSArPSAxKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmICghYnViYmxlKSB7XG4gICAgICByZXN1bHQgPSBjYihub2RlLCBpLCBub2Rlcyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgcmVzdWx0ICE9PSBmYWxzZSAmJlxuICAgICAgbm9kZS50eXBlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkobm9kZS5ub2RlcylcbiAgICApIHtcbiAgICAgIHdhbGsobm9kZS5ub2RlcywgY2IsIGJ1YmJsZSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1YmJsZSkge1xuICAgICAgY2Iobm9kZSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwid2FsayIsIm5vZGVzIiwiY2IiLCJidWJibGUiLCJpIiwibWF4Iiwibm9kZSIsInJlc3VsdCIsImxlbmd0aCIsInR5cGUiLCJBcnJheSIsImlzQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss-value-parser/lib/walk.js\n");

/***/ })

};
;