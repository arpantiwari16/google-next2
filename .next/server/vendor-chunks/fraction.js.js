"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fraction.js";
exports.ids = ["vendor-chunks/fraction.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/fraction.js/fraction.cjs":
/*!***********************************************!*\
  !*** ./node_modules/fraction.js/fraction.cjs ***!
  \***********************************************/
/***/ ((module, exports) => {

eval("\n/**\n * @license Fraction.js v4.3.7 31/08/2023\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2023, Robert Eisele (robert@raw.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/ /**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <numerator>, 1 => <denominator> ]\n * [ n => <numerator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */ (function(root) {\n    \"use strict\";\n    // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n    // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n    // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n    var MAX_CYCLE_LEN = 2000;\n    // Parsed data to avoid calling \"new\" all the time\n    var P = {\n        \"s\": 1,\n        \"n\": 0,\n        \"d\": 1\n    };\n    function assign(n, s) {\n        if (isNaN(n = parseInt(n, 10))) {\n            throw InvalidParameter();\n        }\n        return n * s;\n    }\n    // Creates a new Fraction internally without the need of the bulky constructor\n    function newFraction(n, d) {\n        if (d === 0) {\n            throw DivisionByZero();\n        }\n        var f = Object.create(Fraction.prototype);\n        f[\"s\"] = n < 0 ? -1 : 1;\n        n = n < 0 ? -n : n;\n        var a = gcd(n, d);\n        f[\"n\"] = n / a;\n        f[\"d\"] = d / a;\n        return f;\n    }\n    function factorize(num) {\n        var factors = {};\n        var n = num;\n        var i = 2;\n        var s = 4;\n        while(s <= n){\n            while(n % i === 0){\n                n /= i;\n                factors[i] = (factors[i] || 0) + 1;\n            }\n            s += 1 + 2 * i++;\n        }\n        if (n !== num) {\n            if (n > 1) factors[n] = (factors[n] || 0) + 1;\n        } else {\n            factors[num] = (factors[num] || 0) + 1;\n        }\n        return factors;\n    }\n    var parse = function(p1, p2) {\n        var n = 0, d = 1, s = 1;\n        var v = 0, w = 0, x = 0, y = 1, z = 1;\n        var A = 0, B = 1;\n        var C = 1, D = 1;\n        var N = 10000000;\n        var M;\n        if (p1 === undefined || p1 === null) {\n        /* void */ } else if (p2 !== undefined) {\n            n = p1;\n            d = p2;\n            s = n * d;\n            if (n % 1 !== 0 || d % 1 !== 0) {\n                throw NonIntegerParameter();\n            }\n        } else switch(typeof p1){\n            case \"object\":\n                {\n                    if (\"d\" in p1 && \"n\" in p1) {\n                        n = p1[\"n\"];\n                        d = p1[\"d\"];\n                        if (\"s\" in p1) n *= p1[\"s\"];\n                    } else if (0 in p1) {\n                        n = p1[0];\n                        if (1 in p1) d = p1[1];\n                    } else {\n                        throw InvalidParameter();\n                    }\n                    s = n * d;\n                    break;\n                }\n            case \"number\":\n                {\n                    if (p1 < 0) {\n                        s = p1;\n                        p1 = -p1;\n                    }\n                    if (p1 % 1 === 0) {\n                        n = p1;\n                    } else if (p1 > 0) {\n                        if (p1 >= 1) {\n                            z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                            p1 /= z;\n                        }\n                        // Using Farey Sequences\n                        // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n                        while(B <= N && D <= N){\n                            M = (A + C) / (B + D);\n                            if (p1 === M) {\n                                if (B + D <= N) {\n                                    n = A + C;\n                                    d = B + D;\n                                } else if (D > B) {\n                                    n = C;\n                                    d = D;\n                                } else {\n                                    n = A;\n                                    d = B;\n                                }\n                                break;\n                            } else {\n                                if (p1 > M) {\n                                    A += C;\n                                    B += D;\n                                } else {\n                                    C += A;\n                                    D += B;\n                                }\n                                if (B > N) {\n                                    n = C;\n                                    d = D;\n                                } else {\n                                    n = A;\n                                    d = B;\n                                }\n                            }\n                        }\n                        n *= z;\n                    } else if (isNaN(p1) || isNaN(p2)) {\n                        d = n = NaN;\n                    }\n                    break;\n                }\n            case \"string\":\n                {\n                    B = p1.match(/\\d+|./g);\n                    if (B === null) throw InvalidParameter();\n                    if (B[A] === \"-\") {\n                        s = -1;\n                        A++;\n                    } else if (B[A] === \"+\") {\n                        A++;\n                    }\n                    if (B.length === A + 1) {\n                        w = assign(B[A++], s);\n                    } else if (B[A + 1] === \".\" || B[A] === \".\") {\n                        if (B[A] !== \".\") {\n                            v = assign(B[A++], s);\n                        }\n                        A++;\n                        // Check for decimal places\n                        if (A + 1 === B.length || B[A + 1] === \"(\" && B[A + 3] === \")\" || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                            w = assign(B[A], s);\n                            y = Math.pow(10, B[A].length);\n                            A++;\n                        }\n                        // Check for repeating places\n                        if (B[A] === \"(\" && B[A + 2] === \")\" || B[A] === \"'\" && B[A + 2] === \"'\") {\n                            x = assign(B[A + 1], s);\n                            z = Math.pow(10, B[A + 1].length) - 1;\n                            A += 3;\n                        }\n                    } else if (B[A + 1] === \"/\" || B[A + 1] === \":\") {\n                        w = assign(B[A], s);\n                        y = assign(B[A + 2], 1);\n                        A += 3;\n                    } else if (B[A + 3] === \"/\" && B[A + 1] === \" \") {\n                        v = assign(B[A], s);\n                        w = assign(B[A + 2], s);\n                        y = assign(B[A + 4], 1);\n                        A += 5;\n                    }\n                    if (B.length <= A) {\n                        d = y * z;\n                        s = /* void */ n = x + d * v + z * w;\n                        break;\n                    }\n                /* Fall through on error */ }\n            default:\n                throw InvalidParameter();\n        }\n        if (d === 0) {\n            throw DivisionByZero();\n        }\n        P[\"s\"] = s < 0 ? -1 : 1;\n        P[\"n\"] = Math.abs(n);\n        P[\"d\"] = Math.abs(d);\n    };\n    function modpow(b, e, m) {\n        var r = 1;\n        for(; e > 0; b = b * b % m, e >>= 1){\n            if (e & 1) {\n                r = r * b % m;\n            }\n        }\n        return r;\n    }\n    function cycleLen(n, d) {\n        for(; d % 2 === 0; d /= 2){}\n        for(; d % 5 === 0; d /= 5){}\n        if (d === 1) return 0;\n        // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n        // 10^(d-1) % d == 1\n        // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n        // as we want to translate the numbers to strings.\n        var rem = 10 % d;\n        var t = 1;\n        for(; rem !== 1; t++){\n            rem = rem * 10 % d;\n            if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n        }\n        return t;\n    }\n    function cycleStart(n, d, len) {\n        var rem1 = 1;\n        var rem2 = modpow(10, len, d);\n        for(var t = 0; t < 300; t++){\n            // Solve 10^s == 10^(s+t) (mod d)\n            if (rem1 === rem2) return t;\n            rem1 = rem1 * 10 % d;\n            rem2 = rem2 * 10 % d;\n        }\n        return 0;\n    }\n    function gcd(a, b) {\n        if (!a) return b;\n        if (!b) return a;\n        while(1){\n            a %= b;\n            if (!a) return b;\n            b %= a;\n            if (!b) return a;\n        }\n    }\n    ;\n    /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */ function Fraction(a, b) {\n        parse(a, b);\n        if (this instanceof Fraction) {\n            a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n            this[\"s\"] = P[\"s\"];\n            this[\"n\"] = P[\"n\"] / a;\n            this[\"d\"] = P[\"d\"] / a;\n        } else {\n            return newFraction(P[\"s\"] * P[\"n\"], P[\"d\"]);\n        }\n    }\n    var DivisionByZero = function() {\n        return new Error(\"Division by Zero\");\n    };\n    var InvalidParameter = function() {\n        return new Error(\"Invalid argument\");\n    };\n    var NonIntegerParameter = function() {\n        return new Error(\"Parameters must be integer\");\n    };\n    Fraction.prototype = {\n        \"s\": 1,\n        \"n\": 0,\n        \"d\": 1,\n        /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/ \"abs\": function() {\n            return newFraction(this[\"n\"], this[\"d\"]);\n        },\n        /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/ \"neg\": function() {\n            return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n        },\n        /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/ \"add\": function(a, b) {\n            parse(a, b);\n            return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n        },\n        /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/ \"sub\": function(a, b) {\n            parse(a, b);\n            return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n        },\n        /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/ \"mul\": function(a, b) {\n            parse(a, b);\n            return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n        },\n        /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/ \"div\": function(a, b) {\n            parse(a, b);\n            return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"], this[\"d\"] * P[\"n\"]);\n        },\n        /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/ \"clone\": function() {\n            return newFraction(this[\"s\"] * this[\"n\"], this[\"d\"]);\n        },\n        /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/ \"mod\": function(a, b) {\n            if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n                return new Fraction(NaN);\n            }\n            if (a === undefined) {\n                return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n            }\n            parse(a, b);\n            if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n                throw DivisionByZero();\n            }\n            /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/ /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */ return newFraction(this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]), P[\"d\"] * this[\"d\"]);\n        },\n        /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */ \"gcd\": function(a, b) {\n            parse(a, b);\n            // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n            return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n        },\n        /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */ \"lcm\": function(a, b) {\n            parse(a, b);\n            // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n            if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n                return newFraction(0, 1);\n            }\n            return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n        },\n        /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/ \"ceil\": function(places) {\n            places = Math.pow(10, places || 0);\n            if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n                return new Fraction(NaN);\n            }\n            return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n        },\n        /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/ \"floor\": function(places) {\n            places = Math.pow(10, places || 0);\n            if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n                return new Fraction(NaN);\n            }\n            return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n        },\n        /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/ \"round\": function(places) {\n            places = Math.pow(10, places || 0);\n            if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n                return new Fraction(NaN);\n            }\n            return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n        },\n        /**\n     * Rounds a rational number to a multiple of another rational number\n     *\n     * Ex: new Fraction('0.9').roundTo(\"1/8\") => 7 / 8\n     **/ \"roundTo\": function(a, b) {\n            /*\n      k * x/y ≤ a/b < (k+1) * x/y\n      ⇔ k ≤ a/b / (x/y) < (k+1)\n      ⇔ k = floor(a/b * y/x)\n      */ parse(a, b);\n            return newFraction(this[\"s\"] * Math.round(this[\"n\"] * P[\"d\"] / (this[\"d\"] * P[\"n\"])) * P[\"n\"], P[\"d\"]);\n        },\n        /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/ \"inverse\": function() {\n            return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n        },\n        /**\n     * Calculates the fraction to some rational exponent, if possible\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */ \"pow\": function(a, b) {\n            parse(a, b);\n            // Trivial case when exp is an integer\n            if (P[\"d\"] === 1) {\n                if (P[\"s\"] < 0) {\n                    return newFraction(Math.pow(this[\"s\"] * this[\"d\"], P[\"n\"]), Math.pow(this[\"n\"], P[\"n\"]));\n                } else {\n                    return newFraction(Math.pow(this[\"s\"] * this[\"n\"], P[\"n\"]), Math.pow(this[\"d\"], P[\"n\"]));\n                }\n            }\n            // Negative roots become complex\n            //     (-a/b)^(c/d) = x\n            // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n            // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n            // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n            // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n            if (this[\"s\"] < 0) return null;\n            // Now prime factor n and d\n            var N = factorize(this[\"n\"]);\n            var D = factorize(this[\"d\"]);\n            // Exponentiate and take root for n and d individually\n            var n = 1;\n            var d = 1;\n            for(var k in N){\n                if (k === \"1\") continue;\n                if (k === \"0\") {\n                    n = 0;\n                    break;\n                }\n                N[k] *= P[\"n\"];\n                if (N[k] % P[\"d\"] === 0) {\n                    N[k] /= P[\"d\"];\n                } else return null;\n                n *= Math.pow(k, N[k]);\n            }\n            for(var k in D){\n                if (k === \"1\") continue;\n                D[k] *= P[\"n\"];\n                if (D[k] % P[\"d\"] === 0) {\n                    D[k] /= P[\"d\"];\n                } else return null;\n                d *= Math.pow(k, D[k]);\n            }\n            if (P[\"s\"] < 0) {\n                return newFraction(d, n);\n            }\n            return newFraction(n, d);\n        },\n        /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/ \"equals\": function(a, b) {\n            parse(a, b);\n            return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n        },\n        /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/ \"compare\": function(a, b) {\n            parse(a, b);\n            var t = this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"];\n            return (0 < t) - (t < 0);\n        },\n        \"simplify\": function(eps) {\n            if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n                return this;\n            }\n            eps = eps || 0.001;\n            var thisABS = this[\"abs\"]();\n            var cont = thisABS[\"toContinued\"]();\n            for(var i = 1; i < cont.length; i++){\n                var s = newFraction(cont[i - 1], 1);\n                for(var k = i - 2; k >= 0; k--){\n                    s = s[\"inverse\"]()[\"add\"](cont[k]);\n                }\n                if (Math.abs(s[\"sub\"](thisABS).valueOf()) < eps) {\n                    return s[\"mul\"](this[\"s\"]);\n                }\n            }\n            return this;\n        },\n        /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */ \"divisible\": function(a, b) {\n            parse(a, b);\n            return !(!(P[\"n\"] * this[\"d\"]) || this[\"n\"] * P[\"d\"] % (P[\"n\"] * this[\"d\"]));\n        },\n        /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/ \"valueOf\": function() {\n            return this[\"s\"] * this[\"n\"] / this[\"d\"];\n        },\n        /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n     **/ \"toFraction\": function(excludeWhole) {\n            var whole, str = \"\";\n            var n = this[\"n\"];\n            var d = this[\"d\"];\n            if (this[\"s\"] < 0) {\n                str += \"-\";\n            }\n            if (d === 1) {\n                str += n;\n            } else {\n                if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n                    str += whole;\n                    str += \" \";\n                    n %= d;\n                }\n                str += n;\n                str += \"/\";\n                str += d;\n            }\n            return str;\n        },\n        /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/ \"toLatex\": function(excludeWhole) {\n            var whole, str = \"\";\n            var n = this[\"n\"];\n            var d = this[\"d\"];\n            if (this[\"s\"] < 0) {\n                str += \"-\";\n            }\n            if (d === 1) {\n                str += n;\n            } else {\n                if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n                    str += whole;\n                    n %= d;\n                }\n                str += \"\\\\frac{\";\n                str += n;\n                str += \"}{\";\n                str += d;\n                str += \"}\";\n            }\n            return str;\n        },\n        /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */ \"toContinued\": function() {\n            var t;\n            var a = this[\"n\"];\n            var b = this[\"d\"];\n            var res = [];\n            if (isNaN(a) || isNaN(b)) {\n                return res;\n            }\n            do {\n                res.push(Math.floor(a / b));\n                t = a % b;\n                a = b;\n                b = t;\n            }while (a !== 1);\n            return res;\n        },\n        /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/ \"toString\": function(dec) {\n            var N = this[\"n\"];\n            var D = this[\"d\"];\n            if (isNaN(N) || isNaN(D)) {\n                return \"NaN\";\n            }\n            dec = dec || 15; // 15 = decimal places when no repetation\n            var cycLen = cycleLen(N, D); // Cycle length\n            var cycOff = cycleStart(N, D, cycLen); // Cycle start\n            var str = this[\"s\"] < 0 ? \"-\" : \"\";\n            str += N / D | 0;\n            N %= D;\n            N *= 10;\n            if (N) str += \".\";\n            if (cycLen) {\n                for(var i = cycOff; i--;){\n                    str += N / D | 0;\n                    N %= D;\n                    N *= 10;\n                }\n                str += \"(\";\n                for(var i = cycLen; i--;){\n                    str += N / D | 0;\n                    N %= D;\n                    N *= 10;\n                }\n                str += \")\";\n            } else {\n                for(var i = dec; N && i--;){\n                    str += N / D | 0;\n                    N %= D;\n                    N *= 10;\n                }\n            }\n            return str;\n        }\n    };\n    if (true) {\n        Object.defineProperty(exports, \"__esModule\", ({\n            \"value\": true\n        }));\n        exports[\"default\"] = Fraction;\n        module[\"exports\"] = Fraction;\n    } else {}\n})(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fraction.js/fraction.cjs\n");

/***/ })

};
;