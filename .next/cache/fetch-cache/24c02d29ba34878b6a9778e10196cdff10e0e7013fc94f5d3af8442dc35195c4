{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","cache-control":"private","content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Mon, 11 Mar 2024 17:17:45 GMT","server":"ESF","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"","status":200,"url":"https://www.googleapis.com/customsearch/v1?key=AIzaSyBSyML5OLEjFovkDbY7d4rBF5rJ7DLtDqI&cx=f213d44e1ec82403c&q=google%27}"},"revalidate":31536000,"tags":[]}